// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/todo/v1/todo.proto

package todov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shimabukuromeg/connect-go-todo-example/gen/proto/todo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ToDoServiceName is the fully-qualified name of the ToDoService service.
	ToDoServiceName = "proto.todo.v1.ToDoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ToDoServiceCreateTaskProcedure is the fully-qualified name of the ToDoService's CreateTask RPC.
	ToDoServiceCreateTaskProcedure = "/proto.todo.v1.ToDoService/CreateTask"
	// ToDoServiceUpdateTaskStatusProcedure is the fully-qualified name of the ToDoService's
	// UpdateTaskStatus RPC.
	ToDoServiceUpdateTaskStatusProcedure = "/proto.todo.v1.ToDoService/UpdateTaskStatus"
	// ToDoServiceDeleteTaskProcedure is the fully-qualified name of the ToDoService's DeleteTask RPC.
	ToDoServiceDeleteTaskProcedure = "/proto.todo.v1.ToDoService/DeleteTask"
)

// ToDoServiceClient is a client for the proto.todo.v1.ToDoService service.
type ToDoServiceClient interface {
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTaskStatus(context.Context, *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
}

// NewToDoServiceClient constructs a client for the proto.todo.v1.ToDoService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewToDoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ToDoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &toDoServiceClient{
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+ToDoServiceCreateTaskProcedure,
			opts...,
		),
		updateTaskStatus: connect.NewClient[v1.UpdateTaskStatusRequest, v1.UpdateTaskStatusResponse](
			httpClient,
			baseURL+ToDoServiceUpdateTaskStatusProcedure,
			opts...,
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+ToDoServiceDeleteTaskProcedure,
			opts...,
		),
	}
}

// toDoServiceClient implements ToDoServiceClient.
type toDoServiceClient struct {
	createTask       *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	updateTaskStatus *connect.Client[v1.UpdateTaskStatusRequest, v1.UpdateTaskStatusResponse]
	deleteTask       *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
}

// CreateTask calls proto.todo.v1.ToDoService.CreateTask.
func (c *toDoServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// UpdateTaskStatus calls proto.todo.v1.ToDoService.UpdateTaskStatus.
func (c *toDoServiceClient) UpdateTaskStatus(ctx context.Context, req *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error) {
	return c.updateTaskStatus.CallUnary(ctx, req)
}

// DeleteTask calls proto.todo.v1.ToDoService.DeleteTask.
func (c *toDoServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// ToDoServiceHandler is an implementation of the proto.todo.v1.ToDoService service.
type ToDoServiceHandler interface {
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTaskStatus(context.Context, *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
}

// NewToDoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewToDoServiceHandler(svc ToDoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	toDoServiceCreateTaskHandler := connect.NewUnaryHandler(
		ToDoServiceCreateTaskProcedure,
		svc.CreateTask,
		opts...,
	)
	toDoServiceUpdateTaskStatusHandler := connect.NewUnaryHandler(
		ToDoServiceUpdateTaskStatusProcedure,
		svc.UpdateTaskStatus,
		opts...,
	)
	toDoServiceDeleteTaskHandler := connect.NewUnaryHandler(
		ToDoServiceDeleteTaskProcedure,
		svc.DeleteTask,
		opts...,
	)
	return "/proto.todo.v1.ToDoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ToDoServiceCreateTaskProcedure:
			toDoServiceCreateTaskHandler.ServeHTTP(w, r)
		case ToDoServiceUpdateTaskStatusProcedure:
			toDoServiceUpdateTaskStatusHandler.ServeHTTP(w, r)
		case ToDoServiceDeleteTaskProcedure:
			toDoServiceDeleteTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedToDoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedToDoServiceHandler struct{}

func (UnimplementedToDoServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.todo.v1.ToDoService.CreateTask is not implemented"))
}

func (UnimplementedToDoServiceHandler) UpdateTaskStatus(context.Context, *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.todo.v1.ToDoService.UpdateTaskStatus is not implemented"))
}

func (UnimplementedToDoServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.todo.v1.ToDoService.DeleteTask is not implemented"))
}
