package main

import (
	"context"
	"log"
	"net/http"
	"sync"

	"connectrpc.com/connect"
	"github.com/shimabukuromeg/connect-go-todo-example/gen/proto/todo/v1/todov1connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	todov1 "github.com/shimabukuromeg/connect-go-todo-example/gen/proto/todo/v1" // generated by protoc-gen-go
)

type TodoServer struct {
	todos  sync.Map
	nextID int
}

func (s *TodoServer) CreateTask(
	ctx context.Context,
	req *connect.Request[todov1.CreateTaskRequest],
) (*connect.Response[todov1.CreateTaskResponse], error) {
    log.Println("Request headers: ", req.Header())
	// TODO: Implement this method.
	res := connect.NewResponse(&todov1.CreateTaskResponse{})
    res.Header().Set("CreateTask-Version", "v1")
    return res, nil
}

func (s *TodoServer) UpdateTaskStatus(
	ctx context.Context,
	req *connect.Request[todov1.UpdateTaskStatusRequest],
) (*connect.Response[todov1.UpdateTaskStatusResponse], error) {
    log.Println("Request headers: ", req.Header())
	// TODO: Implement this method.
	res := connect.NewResponse(&todov1.UpdateTaskStatusResponse{})
    res.Header().Set("UpdateTaskStatus-Version", "v1")
    return res, nil
}

func (s *TodoServer) DeleteTask(
	ctx context.Context,
	req *connect.Request[todov1.DeleteTaskRequest],
) (*connect.Response[todov1.DeleteTaskResponse], error) {
    log.Println("Request headers: ", req.Header())
	// TODO: Implement this method.
res := connect.NewResponse(&todov1.DeleteTaskResponse{})
    res.Header().Set("DeleteTask-Version", "v1")
    return res, nil
}


func main() {
    todoServer := &TodoServer{}
    mux := http.NewServeMux()
    path, handler := todov1connect.NewToDoServiceHandler(todoServer)
    mux.Handle(path, handler)
    http.ListenAndServe(
        "localhost:8080",
        // Use h2c so we can serve HTTP/2 without TLS.
        h2c.NewHandler(mux, &http2.Server{}),
    )
}